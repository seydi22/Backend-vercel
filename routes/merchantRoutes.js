// backend/routes/merchantRoutes.js

const express = require('express');
const router = express.Router();
const Merchant = require('../models/Merchant');
const authMiddleware = require('../middleware/authMiddleware'); // Middleware pour prot√©ger la route 
const multer = require('multer'); // Importe multer
const roleMiddleware = require('../middleware/roleMiddleware'); // Importez le middleware
const Agent = require('../models/Agent'); // Ajoutez cette ligne pour importer le mod√®le Agent
const cloudinary = require('cloudinary').v2;
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const { agent } = require('supertest');
const xlsx = require('xlsx'); // <--- Assurez-vous que cette ligne est bien pr√©sente !


// Configuration de Cloudinary
// (Assurez-vous que cette configuration est dans server.js ou que les variables sont bien charg√©es)
cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

const storage = new CloudinaryStorage({
    cloudinary: cloudinary,
    params: (req, file) => {
        let folderName = 'enrolement_marchand';
        let public_id;
        
        // D√©termine l'ID public en fonction du fichier
        if (file.fieldname === 'pieceIdentiteRecto') {
            public_id = `piece_recto_${Date.now()}`;
        } else if (file.fieldname === 'pieceIdentiteVerso') {
            public_id = `piece_verso_${Date.now()}`;
        } else if (file.fieldname === 'photoPasseport') {
            public_id = `passeport_${Date.now()}`;
        } else if (file.fieldname === 'photoEnseigne') {
            public_id = `enseigne_${Date.now()}`;
        } else {
            public_id = `file_${Date.now()}`;
        }
        
        return {
            folder: folderName,
            format: 'jpg',
            public_id: public_id,
        };
    },
});

const upload = multer({ storage: storage });

// @route   POST /api/merchants/register
// @desc    Enregistrer un nouveau marchand
// @access  Private (Agent/Superviseur)
router.post(
    '/register',
    authMiddleware,
    roleMiddleware(['agent', 'superviseur']),
    upload.fields([
        { name: 'pieceIdentiteRecto', maxCount: 1 },
        { name: 'pieceIdentiteVerso', maxCount: 1 },
        { name: 'photoPasseport', maxCount: 1 },
        { name: 'photoEnseigne', maxCount: 1 }
    ]),
    async (req, res) => {
        // D√©structure toutes les donn√©es du corps de la requ√™te, y compris les nouvelles informations de l'op√©rateur
        const {
            nom, secteur, typeCommerce, region, ville, commune,
            nomGerant, prenomGerant, dateNaissanceGerant,
            lieuNaissanceGerant, numeroCompteMoov, adresse,
            contact, nif, rc, typePiece, longitude, latitude,
            nomOperateur, codeOperateur // üëà Nouveaux champs pour l'op√©rateur
        } = req.body;

        // R√©cup√®re les URL des images depuis l'objet req.files
        const pieceIdentiteRectoUrl = req.files['pieceIdentiteRecto'] ? req.files['pieceIdentiteRecto'][0].path : null;
        const pieceIdentiteVersoUrl = req.files['pieceIdentiteVerso'] ? req.files['pieceIdentiteVerso'][0].path : null;
        const photoPasseportUrl = req.files['photoPasseport'] ? req.files['photoPasseport'][0].path : null;
        const photoEnseigneUrl = req.files['photoEnseigne'] ? req.files['photoEnseigne'][0].path : null;

        // Valide la pr√©sence des donn√©es de l'op√©rateur, qui sont maintenant requises
        if (!nomOperateur || !codeOperateur) {
            return res.status(400).json({ msg: "Les informations de l'op√©rateur sont requises." });
        }

        try {
            // Cr√©er un objet pour le premier op√©rateur
            const newOperator = { nom: nomOperateur, code: codeOperateur };

            // Cr√©er un nouvel objet marchand avec les donn√©es du formulaire et le premier op√©rateur
            const newMerchant = new Merchant({
                nom, secteur, typeCommerce, region, ville, commune,
                nomGerant, prenomGerant, dateNaissanceGerant,
                lieuNaissanceGerant, numeroCompteMoov, adresse,
                contact, nif, rc, longitude, latitude,
                pieceIdentite: {
                    type: typePiece,
                    cniRectoUrl: pieceIdentiteRectoUrl,
                    cniVersoUrl: pieceIdentiteVersoUrl,
                    passeportUrl: photoPasseportUrl
                },
                photoEnseigneUrl,
                agentRecruteurId: req.user.id,
                operators: [newOperator] // üëà Ajoute l'op√©rateur au tableau
            });

            // Sauvegarder le nouveau marchand dans la base de donn√©es
            const merchant = await newMerchant.save();

            // Mettre √† jour la performance de l'agent recruteur
            const agent = await Agent.findById(req.user.id);
            if (agent) {
                agent.performance.enr√¥lements += 1;
                await agent.save();
            }

            // R√©pondre avec l'objet marchand nouvellement cr√©√©
            res.status(201).json(merchant);

        } catch (err) {
            console.error(err.message);
            // G√©rer les erreurs de la base de donn√©es (doublons, etc.)
            res.status(500).send('Erreur du serveur.');
        }
    }
);


router.get(
    '/export',
    [authMiddleware, roleMiddleware(['admin', 'superviseur'])],
    async (req, res) => {
        try {
            // R√©cup√©rer uniquement les marchands valid√©s
            const merchants = await Merchant.find({ statut: 'valid√©' }).lean();
            if (!merchants || merchants.length === 0) {
                return res.status(404).json({ msg: 'Aucun marchand valid√© √† exporter.' });
            }

            // Colonnes du template (ordre exact)
            const headers = [
                'ShortCode',
                'OrganizationName',
                'Country',
                'Country Value',
                'City',
                'City Value',
                'Preferred Notification Channel',
                'Preferred Notification Channel Value',
                'Notification Receiving MSISDN',
                'Notification Receiving MSISDN Value',
                'Preferred Notification Language',
                'Preferred Notification Language Value',
                'Commercial Register',
                'Commercial Register Value',
                'NIF',
                'NIF Value',
                'Organization Type',
                'Organization Type Value',
                'Contact Type',
                'Contact Type Value',
                'Contact First Name',
                'Contact First Name Value',
                'Contact Second Name',
                'Contact Second Name Value',
                'Product',
                'ChargeProfile',
                'Purpose of the company ',
                'Purpose of the company Value'
            ];

            // Construire les donn√©es pour l'export
            const exportData = merchants.map(m => ({
                'ShortCode': m.shortCode || '',
                'OrganizationName': m.nom || '',
                'Country': '[Address Details][Country]', // FIXE
                'Country Value': 'MRT', // FIXE
                'City': '[Address Details][City]', // FIXE
                'City Value': m.ville || '',
                'Preferred Notification Channel': '[Contact Details][Preferred Notification Channel]', // FIXE
                'Preferred Notification Channel Value': '1001',
                'Notification Receiving MSISDN': '[Contact Details][Notification Receiving MSISDN]', // FIXE
                'Notification Receiving MSISDN Value': m.contact || '',
                'Preferred Notification Language': '[Contact Details][Preferred Notification Language]', // FIXE
                'Preferred Notification Language Value': 'fr',
                'Commercial Register': '[Corporate Information][Commercial Register]', // FIXE
                'Commercial Register Value': m.rc || '',
                'NIF': '[Corporate Information][NIF]', // FIXE
                'NIF Value': m.nif || '',
                'Organization Type': '[Organization Type][Organization Type]', // FIXE
                'Organization Type Value': 'MERCHANT',
                'Contact Type': '[Organization Contact Details][Contact Type]', // FIXE
                'Contact Type Value': '02',
                'Contact First Name': '[Organization Contact Details][Contact First Name]', // FIXE
                'Contact First Name Value': m.prenomGerant || '',
                'Contact Second Name': '[Organization Contact Details][Contact Second Name]', // FIXE
                'Contact Second Name Value': m.nomGerant || "",
                'Product': '45071',
                'ChargeProfile': '55055',
                'Purpose of the company ': '[Corporate Information][Purpose of the company]', // FIXE
                'Purpose of the company Value': '01'
            }));

            // Cr√©ation du fichier Excel
            const XLSX = require('xlsx');
            const workbook = XLSX.utils.book_new();
            const worksheet = XLSX.utils.json_to_sheet(exportData, { header: headers });
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Marchands');

            // Envoi du fichier au client
            const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
            res.setHeader('Content-Disposition', 'attachment; filename="merchants_export.xlsx"');
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.send(buffer);

        } catch (error) {
            console.error('Erreur export marchands:', error);
            res.status(500).json({ msg: 'Erreur lors de l‚Äôexport des marchands.' });
        }
    }
);


// @route   GET /api/merchants/all
// @desc    Obtenir la liste de tous les marchands, tous statuts confondus
// @access  Private (Admin)
router.get(
    '/all',
    [authMiddleware, roleMiddleware(['admin'])],
    async (req, res) => {
        try {
            const { statut, search } = req.query;

            // Construction du filtre
            const filter = {};
            if (statut) {
                filter.statut = statut;
            }
            if (search) {
                // Recherche sur nom, nomGerant ou contact (insensible √† la casse)
                filter.$or = [
                    { nom: { $regex: search, $options: 'i' } },
                    { nomGerant: { $regex: search, $options: 'i' } },
                    { contact: { $regex: search, $options: 'i' } },
                ];
            }

            const merchants = await Merchant.find(filter)
                .populate('agentRecruteurId', 'matricule')
                .select('-documents');

            res.json(merchants);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur.');
        }
    }
);

router.get(
    '/all',
    authMiddleware,
    roleMiddleware(['superviseur','admin']),
    async (req, res) => {
        try {
            // 1. Trouver les agents de ce superviseur
            const myAgents = await Agent.find({ superviseurId: req.user.id });
            const agentIds = myAgents.map(agent => agent._id);

            // 2. Construire la requ√™te pour les marchands
            const { statut, search } = req.query;
            let query = {
                agentRecruteurId: { $in: agentIds } // Filtre par les agents du superviseur
            };

            // ... (votre logique de filtre par statut et de recherche existante) ...

            const allMerchants = await Merchant.find(query).sort({ createdAt: -1 });
            res.json(allMerchants);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur.');
        }
    }
);
// Route pour obtenir les statistiques du tableau de bord du superviseur
router.get(
    '/dashboard-stats',
    authMiddleware,
    roleMiddleware(['superviseur', 'admin']),
    async (req, res) => {
        try {
            // 1. Trouver les agents de ce superviseur
            const myAgents = await Agent.find({ superviseurId: req.user.id });
            const agentIds = myAgents.map(agent => agent._id);

            // 2. Agr√©ger les statistiques pour les marchands de ces agents
            const stats = await Merchant.aggregate([
                { $match: { agentRecruteurId: { $in: agentIds } } }, // <-- Filtre ajout√©
                { $group: { _id: '$statut', count: { $sum: 1 } } }
            ]);

            const formattedStats = {
                'en attente': 0,
                'valid√©': 0,
                'rejet√©': 0,
            };
            stats.forEach(s => {
                formattedStats[s._id] = s.count;
            });

            // 3. R√©cup√©rer la liste des marchands en attente pour le tableau
            const pendingMerchants = await Merchant.find({
                statut: 'en attente',
                agentRecruteurId: { $in: agentIds } // <-- Filtre ajout√©
            }).select('-__v');

            res.json({
                stats: formattedStats,
                pendingMerchants: pendingMerchants
            });
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur');
        }
    }
);
router.post(
    '/validate/:id',
    authMiddleware,
    roleMiddleware(['admin', 'superviseur']),
    async (req, res) => {
        try {
            const merchant = await Merchant.findById(req.params.id);

            if (!merchant) {
                return res.status(404).json({ msg: 'Marchand non trouv√©.' });
            }
            if (merchant.statut === 'valid√©') {
                return res.status(400).json({ msg: 'Ce marchand est d√©j√† valid√©.' });
            }

            const lastMerchant = await Merchant.findOne({ shortCode: { $exists: true } })
                .sort({ shortCode: -1 });

            let newShortCode = 3000;
            if (lastMerchant && lastMerchant.shortCode) {
                newShortCode = lastMerchant.shortCode + 1;
            }

            // Attribuer le shortCode au marchand
            merchant.shortCode = newShortCode;
            merchant.statut = 'valid√©';
            merchant.validatedAt = Date.now();
            
            // üëà PROPAAGATION DU SHORT CODE AUX OP√âRATEURS
            merchant.operators.forEach(operator => {
                operator.shortCode = newShortCode;
            });

            await merchant.save();

            if (merchant.agentRecruteurId) {
                const agent = await Agent.findById(merchant.agentRecruteurId);
                if (agent) {
                    agent.performance.validations += 1;
                    await agent.save();
                }
            }

            res.json({ msg: 'Marchand valid√© avec succ√®s.', merchant });
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur.');
        }
    }
);



// Route pour rejeter un marchand (r√©serv√©e aux superviseurs)
router.post('/reject/:id', authMiddleware, roleMiddleware(['superviseur','admin']), async (req, res) => {
    
        const merchantId = req.params.id;
        const { rejectionReason } = req.body;

        if (!rejectionReason) {
            return res.status(400).json({ msg: 'La raison du rejet est requise.' });
        }

        const updatedMerchant = await Merchant.findByIdAndUpdate(
            merchantId,
            { statut: 'rejet√©', rejectionReason },
            { new: true }
        );

        if (!updatedMerchant) {
            return res.status(404).json({ msg: 'Marchand non trouv√©.' });
        }

        res.json({ msg: 'Marchand rejet√© avec succ√®s', merchant: updatedMerchant });

    
});
//Cette route sera utile pour le superviseur qui veut voir une liste de tous les marchands qui n'ont pas encore √©t√© valid√©s, rejet√©s ou enr√¥l√©s.
router.get(
    '/pending',
    authMiddleware,
    roleMiddleware(['superviseur', 'admin']),
    async (req, res) => {
        try {
            const pendingMerchants = await Merchant.find({ statut: 'en attente' }).select('-__v');
            res.json(pendingMerchants);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur');
        }
    }
);
//Cette route permettra √† un superviseur ou √† un administrateur de consulter tous les marchands enr√¥l√©s par un agent pr√©cis, en utilisant l'ID de cet agent.
router.get(
    '/by-agent/:agentId',
    authMiddleware,
    roleMiddleware(['superviseur', 'admin']),
    async (req, res) => {
        try {
            const agentId = req.params.agentId;
            const merchants = await Merchant.find({ agentRecruteurId: agentId }).select('-__v');

            if (merchants.length === 0) {
                return res.status(404).json({ msg: 'Aucun marchand trouv√© pour cet agent.' });
            }

            res.json(merchants);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur');
        }
    }
);
//permettra √† un agent de voir la liste de tous les marchands qu'il a enr√¥l√©s
    router.get(
        '/my-merchants',
        authMiddleware,
        roleMiddleware(['agent']),
        async (req, res) => {
            try {
                const agentId = req.user.id;
                const merchants = await Merchant.find({ agentRecruteurId: agentId }).select('-__v');

                if (merchants.length === 0) {
                    return res.status(404).json({ msg: 'Aucun marchand trouv√© pour cet agent.' });
                }

                res.json(merchants);
            } catch (err) {
                console.error(err.message);
                res.status(500).send('Erreur du serveur');
            }
        }
    );
    router.get(
    '/superviseur-merchants',
    authMiddleware,
    roleMiddleware(['superviseur']),
    async (req, res) => {
        try {
            const superviseurId = req.user.id;

            // 1. Trouver tous les agents qui sont supervis√©s par cet utilisateur
            const agents = await Agent.find({ superviseurId: superviseurId });
            const agentIds = agents.map(agent => agent._id);

            // 2. Pr√©parer les filtres de la requ√™te
            const { statut, search } = req.query;
            const filter = { agentRecruteurId: { $in: agentIds } };

            if (statut && statut !== 'Tous') {
                filter.statut = statut;
            }
            if (search) {
                // Utilisation d'une expression r√©guli√®re pour une recherche flexible
                const searchRegex = new RegExp(search, 'i');
                filter.$or = [
                    { nom: searchRegex },
                    { nomGerant: searchRegex },
                    { contact: searchRegex },
                ];
            }

            // 3. Ex√©cuter la requ√™te avec les filtres
            // Peupler le nom de l'agent pour l'affichage
            const merchants = await Merchant.find(filter).populate('agentRecruteurId', 'nom');

            if (merchants.length === 0) {
                return res.status(404).json({ msg: 'Aucun marchand trouv√© pour vos agents.' });
            }

            res.json(merchants);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur');
        }
    }
);
//route pour afficher les d√©tails d'un marchand
router.get(
    '/:id',
    authMiddleware,
    async (req, res) => {
        try {
            const merchantId = req.params.id;
            const merchant = await Merchant.findById(merchantId).select('-__v');

            if (!merchant) {
                return res.status(404).json({ msg: 'Marchand non trouv√©.' });
            }

            res.json(merchant);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur');
        }
    }
);
//-----------------------------------------------------
// ROUTES DYNAMIQUES
//-----------------------------------------------------

// @route   POST /api/merchants/create/:id
// @desc    Cr√©er un marchand (Ajout du short code)
// @access  Priv√© (Agent de saisie, Superviseur Call Centre)
router.post(
    '/create/:id',
    [authMiddleware, roleMiddleware(['superviseur_call_centre', 'agent_de_saisie'])],
    async (req, res) => {
        try {
            const { shortCode } = req.body;
            if (!shortCode || shortCode.trim() === '') {
                return res.status(400).json({ msg: 'Le short code est requis pour cr√©er un marchand.' });
            }

            const merchant = await Merchant.findById(req.params.id);
            if (!merchant) {
                return res.status(404).json({ msg: 'Marchand non trouv√©.' });
            }

            merchant.shortCode = shortCode;
            merchant.statut = 'cr√©√©';
            await merchant.save();

            // Incr√©menter le compteur 'created' de l'agent de saisie
            await User.findByIdAndUpdate(merchant.agentSaisieId, {
                $inc: { 'performance_saisie.created': 1 }
            });

            res.json(merchant);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur.');
        }
    }
);
// @route   GET /api/agents/performance
// @desc    Obtenir le rapport de performance des agents de saisie
// @access  Priv√© (Superviseur Call Centre, Admin)
router.get(
    '/performance',
    [authMiddleware, roleMiddleware(['superviseur_call_centre', 'admin'])],
    async (req, res) => {
        try {
            const agents = await User.find({ role: 'agent_de_saisie' }).select('matricule performance_saisie');
            res.json(agents);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur serveur.');
        }
    }
);


// @route   POST /api/merchants/reject/:id
// @desc    Rejeter un marchand (Ajout de la raison et incr√©mentation du compteur)
// @access  Priv√© (Agent de saisie, Superviseur Call Centre)
router.post(
    '/reject/:id',
    [authMiddleware, roleMiddleware(['superviseur_call_centre', 'agent_de_saisie'])],
    async (req, res) => {
        try {
            const { rejectionReason } = req.body;
            if (!rejectionReason || rejectionReason.trim() === '') {
                return res.status(400).json({ msg: 'Une raison de rejet de cr√©ation est requise.' });
            }

            const merchant = await Merchant.findById(req.params.id);
            if (!merchant) {
                return res.status(404).json({ msg: 'Marchand non trouv√©.' });
            }

            merchant.rejectionReason = rejectionReason;
            merchant.statut = 'rejet√©';
            await merchant.save();

            // Incr√©menter le compteur 'rejected' de l'agent de saisie
            await User.findByIdAndUpdate(merchant.agentSaisieId, {
                $inc: { 'performance_saisie.rejected': 1 }
            });

            res.json(merchant);
        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur.');
        }
    }
);
//assigner a  un Agent de saise
router.post(
    '/dispatch/:id',
    [authMiddleware, roleMiddleware(['superviseur_call_centre'])],
    async (req, res) => {
        try {
            const { agentSaisieId } = req.body;
            const merchantId = req.params.id;

            // V√©rifier que le marchand et l'agent existent
            const merchant = await Merchant.findById(merchantId);
            const agent = await User.findById(agentSaisieId);

            if (!merchant) {
                return res.status(404).json({ msg: 'Marchand non trouv√©.' });
            }
            if (!agent || agent.role !== 'agent_de_saisie') {
                return res.status(404).json({ msg: 'Agent de saisie non valide.' });
            }

            // Assignation de l'agent au marchand
            merchant.agentSaisieId = agentSaisieId;
            await merchant.save();

            res.json({ msg: `Marchand ${merchant.nom} assign√© √† l'agent ${agent.matricule}.` });

        } catch (err) {
            console.error(err.message);
            res.status(500).send('Erreur du serveur lors de l\'assignation.');
        }
    }
);


module.exports = router;